%{
#include <stdio.h>
#include <stdlib.h>

void print_token(const char* type, const char* value) {
    printf("%s: %s\n", type, value);
}
%}

%option noyywrap

%%

/* Keywords */
"int"|"char"|"return"|"if"|"else"|"while"|"for"|"float"|"double"|"void"    { print_token("Keyword", yytext); }

/* Identifiers (variable names) */
[a-zA-Z_][a-zA-Z0-9_]*                                                     { print_token("Identifier", yytext); }

/* Numeric Constants */
[0-9]+(\.[0-9]+)?                                                          { print_token("Constant", yytext); }

/* Strings (single character literals) */
'[^']'                                                                      { print_token("String", yytext); }

/* Punctuation */
[{}()\[\],.;]                                                              { print_token("Punctuation", yytext); }

/* Operators */
[+\-*/=<>!&|%^]                                                            { print_token("Operator", yytext); }

/* Multi-line comments */
\/\*([^*]|\*+[^*/])*\*+\/                                                  { /* Ignore comments */ }

/* Single-line comments */
\/\/.*                                                                     { /* Ignore comments */ }

/* Ignore whitespace */
[ \t\n\r]+                                                                 { /* Ignore */ }

/* Lexical error (unrecognized tokens) */
.                                                                          { printf("Lexical Error: %s\n", yytext); }

%%

int main() {
    FILE *file = fopen("input.txt", "r");
    if (!file) {
        printf("Error: Could not open input.txt\n");
        return 1;
    }
    yyin = file;
    yylex();
    fclose(file);
    return 0;
}
